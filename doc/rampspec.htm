<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf8;" />
<title>Rampspec profile format</title>
<style>
q {font-style:italic;}
.ordinal, .output, .rampspec {font-family:monospace;}
.rampspec, .literal {font-weight:bold;}
a[href="#toc"] {font-size:75%;}
table.bare * {border:0;}
dl {margin-bottom:1ex;}
dd {margin-top:1ex;}
</style>
</head>
<body>

<h1>Rampspec - temperature profile format</h1>
<h2 id="toc">Table of Contents</h2>
<ol type="1">
  <li><a href="#s1">Shortcut: ramptool</a></li>
  <li><a href="#s2">Syntax overview</a></li>
  <li><a href="#s3">Pre-processor</a>
    <ol type="i">
      <li><a href="#s3.1"><span class="rampspec">#</span>: Repeat</a></li>
    </ol>
  </li>
  <li><a href="#s4">Actions</a>
    <ol type="i">
      <li><a href="#s4.1"><span class="rampspec">H</span>: Hold</a></li>
      <li><a href="#s4.2"><span class="rampspec">I</span>: Idle</a></li>
      <li><a href="#s4.3"><span class="rampspec">J</span>: Jump</a></li>
      <li><a href="#s4.4"><span class="rampspec">R</span>: Ramp</a></li>
      <li><a href="#s4.5"><span class="rampspec">W</span>: Wait</a></li>
      <li><a href="#s4.6"><span class="rampspec">X</span>: eXec</a></li>
    </ol>
  </li>
  <li><a href="#s5">Arguments</a>
    <ol type="i">
      <li><a href="#s5.1"><span class="rampspec">c</span>: change</a></li>
      <li><a href="#s5.2"><span class="rampspec">d</span>: dry</a></li>
      <li><a href="#s5.3"><span class="rampspec">j</span>: jump</a></li>
      <li><a href="#s5.4"><span class="rampspec">l</span>: limit</a></li>
      <li><a href="#s5.5"><span class="rampspec">r</span>: rate</a></li>
      <li><a href="#s5.6"><span class="rampspec">s</span>: setpoint</a></li>
      <li><a href="#s5.7"><span class="rampspec">t</span>: time</a></li>
      <li><a href="#s5.8"><span class="rampspec">z</span>: stabilise</a></li>
    </ol>
  </li>
  <li><a href="#s6">Examples</a></li>
</ol>
<hr />

<h2 id="s1"><span class="ordinal">1 -</span> Shortcut: <tt>ramptool</tt> <a href="#toc">(back)</a></h2>
<p>For really simple profiles (like, "go down to 10Â°C, hold for an hour, go back up"), you can use ramptool to generate the profile with <a href="#s4.6">Execute (<span class="rampspec">X</span>) actions</a> at periodic intervals.  For help run <tt>./ramptool.py -h</tt>.</p>
<p>You can then use `backticks` to insert the ramptool command into the rampspec commandline.</p>
<p>Note that the profile will last longer than expected due to the execs (ramping does not run concurrently with execs), unless you pass ramptool <tt>-x/--xdur</tt> (length of exec in minutes) so that it can allow for this.  To measure xdur for an exec, run a profile of '<span class="rampspec">X;I</span>' with that exec, and measure the time from <span class="output">"Started action: X"</span> to <span class="output">"Started action: I"</span>.</p>

<h2 id="s2"><span class="ordinal">2 -</span> Syntax overview <a href="#toc">(back)</a></h2>
<p>A rampspec (after <a href="#s3">pre-processing</a>) consists of a list of <a href="#s4">actions</a>, each of which has a list of <a href="#s5">arguments</a> and optionally a label (an integer, used as the target for a jump).</p>
<p>Here is the syntax, in <acronym title="extended Backus-Naur form">EBNF</a>:</p>
<table class="bare">
<tr><td>&lt;rampspec&gt;</td><td>::=</td><td>&lt;action&gt; | &lt;rampspec&gt; <span class="literal">;</span> &lt;action&gt;</td></tr>
<tr><td>&lt;action&gt;</td><td>::=</td><td>&lt;label&gt;? &lt;act&gt; &lt;arglist&gt;?</td></tr>
<tr><td>&lt;label&gt;</td><td>::=</td><td>&lt;int&gt; <span class="literal">:</span></td></tr>
<tr><td>&lt;int&gt;</td><td>::=</td><td>&lt;digit&gt; &lt;int&gt;?</td></tr>
<tr><td>&lt;act&gt;</td><td>::=</td><td>&lt;upper&gt;</td></tr>
<tr><td>&lt;arglist&gt;</td><td>::=</td><td>&lt;argument&gt; | &lt;arglist&gt; <span class="literal">,</span> &lt;argument&gt;</td></tr>
<tr><td>&lt;argument&gt;</td><td>::=</td><td>&lt;lower&gt; &lt;value&gt;</td></tr>
<tr><td>&lt;value&gt;</td><td>::=</td><td>&lt;no-punct&gt; | &lt;value&gt; &lt;no-punct&gt;</td></tr>
<tr><td>&lt;no-punct&gt;</td><td>::=</td><td>any character except <span class="literal">,</span> <span class="literal">;</span> <span class="literal">:</span></td></tr>
</table>
<p>While the value of an argument is defined as a &lt;no-punct&gt;, in practice all arguments currently take an int, a float, or (in the case of booleans) no explicit value.</p>

<h2 id="s3"><span class="ordinal">3 -</span> Pre-processor <a href="#toc">(back)</a></h2>
<p>Before parsing, the rampspec string is passed through a simple pre-processor.  Directives to this pre-processor are introduced with square brackets (<span class="literal">[</span>), and overall are formed as follows:</p>
<p><span class="literal">[</span> &lt;arglist&gt;? &lt;macroname&gt; &lt;text&gt; <span class="literal">]</span></p>
<p>Wherein: &lt;text&gt; contains no <span class="literal">[</span> or <span class="literal">]</span>, &lt;arglist&gt; is a comma-separated list of arguments (each containing no <span class="literal">[</span>, <span class="literal">]</span> or <span class="literal">,</span>, nor any &lt;macroname&gt;s), and &lt;macroname&gt; is one of the macros defined below.</p>
<p>These macros can be nested, and are evaluated from the middle outwards.  Thus <span class="rampspec">[[2#1]#I;]</span> expands to <span class="rampspec">[11#I;]</span> and thence to <span class="rampspec">I;I;I;I;I;I;I;I;I;I;I;</span>.</p>
<p>The pre-processor is blind to the syntax of the actual language; it doesn't tokenise at all, it just treats it as an arbitrary character string.</p>

<h3 id="s3.1"><span class="ordinal">3.i -</span> <span class="rampspec">#</span>: Repeat <a href="#toc">(back)</a></h3>
<p>The <span class="rampspec">#</span> macro takes a single integer argument <em>n</em> and expands to &lt;text&gt; repeated <em>n</em> times.</p>

<h2 id="s4"><span class="ordinal">4 -</span> Actions <a href="#toc">(back)</a></h2>
<p><em>Actions</em> can be thought of in two ways.  They are instructions to send to the oven; they are also stereotyped pieces of temperature-versus-time curve.  (The <a href="#s4.3">jump (<span class="rampspec">J</span>)</a> and <a href="#s4.6">execute (<span class="rampspec">X</span>)</a> actions are exceptions that don't really fit either of these definitions.)</p>
<p>The following subsections detail each individual action.</p>

<h3 id="s4.1"><span class="ordinal">4.i -</span> <span class="rampspec">H</span>: Hold <a href="#toc">(back)</a></h3>
<p>The <em>Hold</em> action sets a specified setpoint, and holds it for a given time.  It represents a horizontal line on the temperature-versus-time graph.</p>
<p>It takes the following arguments: <a href="#s5.1">change</a>, <a href="#s5.2">dry</a>, <a href="#s5.6">setpoint</a>, <a href="#s5.7">time</a>.</p>
<p>Without arguments, it is equivalent to <span class="rampspec">Hc0,t0</span>, which puts the oven into Active mode at the previous setpoint.</p>

<h3 id="s4.2"><span class="ordinal">4.ii -</span> <span class="rampspec">I</span>: Idle <a href="#toc">(back)</a></h3>
<p>The <em>Idle</em> action puts the oven into Idle mode for the specified duration.  At the end of this time, the 'previous setpoint' is set to the current <em>measured</em> temperature of the oven chamber.  After a reasonably long idle period, this will approximate ambient temperature.  For this reason, most rampspecs will start with <span class="rampspec">I;</span>.  Most will also end with <span class="rampspec">I</span> in order to leave the oven idle when finished.</p>
<p>This action takes the following argument: <a href="#s5.7">time</a>.</p>
<p>Without arguments, it is equivalent to <span class="rampspec">It0</span>, which puts the oven into Idle mode and reads the current temperature.</p>

<h3 id="s4.3"><span class="ordinal">4.iii -</span> <span class="rampspec">J</span>: Jump <a href="#toc">(back)</a></h3>
<p>The <em>Jump</em> action makes an unconditional jump to a label.  Jumps can only go forwards (ie. looping is not possible).</p>
<p>This action takes only one argument, <a href="#s5.3">jump</a>, which cannot be omitted.</p>

<h3 id="s4.4"><span class="ordinal">4.iv -</span> <span class="rampspec">R</span>: Ramp <a href="#toc">(back)</a></h3>
<p>The <em>Ramp</em> action linearly ramps the setpoint to a new value at a specified rate (or over a specified time).  It represents a sloping line on the temperature-versus-time graph.</p>
<p>It takes the following arguments: <a href="#s5.1">change</a>, <a href="#s5.2">dry</a>, <a href="#s5.5">rate</a>, <a href="#s5.6">setpoint</a>, <a href="#s5.7">time</a>.</p>
<p>At least one of <a href="#s5.5">rate</a> and <a href="#s5.7">time</a> must be specified.  Using both has the semantics of &quot;whichever is slower&quot;.</p>
<!-- Rcrt is allowed even though it's pointless (since either the r or the t will have no effect). -->

<h3 id="s4.5"><span class="ordinal">4.v -</span> <span class="rampspec">W</span>: Wait <a href="#toc">(back)</a></h3>
<p>The <em>Wait</em> action sets a specified setpoint and then waits for it to be reached.  The definition of 'reached' depends on the arguments.</p>
<p>This action takes the following arguments: <a href="#s5.1">change</a>, <a href="#s5.2">dry</a>, <a href="#s5.4">limit</a>, <a href="#s5.6">setpoint</a>, <a href="#s5.7">time</a>, <a href="#s5.8">stabilise</a>.</p>
<p><em>Wait</em> without <a href="#s5.4">limit</a> will wait for the temperature to cross the setpoint, assuming the temperature to be continuous and thus subject to the initial value theorem.</p>
<p><em>Wait</em> with <a href="#s5.8">stabilise</a> but no <a href="#s5.4">limit</a> is forbidden (and the parser rejects it).</p>
<p>The <a href="#s5.7">time</a> argument for <em>Wait</em> is a timeout (maximum time to wait) rather than a duration.</p>
<p>To get the equivalent of OvenCtl 'acclimatise' on <em>Wait</em>, use <a href="#s5.8">stabilise</a>; it's in 3-second units, so <span class="rampspec">z100</span> for the standard 5 minutes.  Alternatively, you can use <a href="#s4.1">Hold</a> with an appropriate <a href="#s5.7">time</a>.</p>

<h3 id="s4.6"><span class="ordinal">4.vi -</span> <span class="rampspec">X</span>: Execute <a href="#toc">(back)</a></h3>
<p>The <em>Execute</em> action runs whatever execution callback was passed to the RampCtl object.  When rampspec.py is run as a script, this does nothing.</p>
<p>This action takes the following argument: <a href="#s5.3">jump</a>.</p>
<p>The <a href="#s5.3">jump</a> is conditional: it will only be taken if the callback returns failure.</p>
<!-- The test run by e'''X'''ecute is supplied as a callback parameter to RampSpec.prepare(); it should have the signature (data -> bool, data) where data is a further parameter which can be supplied to RampSpec.prepare().  The returned bool should be False for success and True for failure (typically you'll use an integer error code, 0 for success). -->

<h2 id="s5"><span class="ordinal">5 -</span> Arguments <a href="#toc">(back)</a></h2>
<p><em>Arguments</em> have a defined type, either int, float or boolean.  In the boolean case, the &lt;value&gt; part is an empty string; the argument is True if present and False if absent.</p>
<p>The following subsections detail each individual argument.</p>

<h3 id="s5.1"><span class="ordinal">5.i -</span> <span class="rampspec">c</span>: change <a href="#toc">(back)</a></h3>
<p>The <em>change</em> argument expresses the change in temperature setpoint, in Kelvins.  Its value is a float.</p>
<p><em>change</em> cannot be combined with <a href="#s5.6">setpoint</a>.</p>

<h3 id="s5.2"><span class="ordinal">5.ii -</span> <span class="rampspec">d</span>: dry <a href="#toc">(back)</a></h3>
<p>The <em>dry</em> argument controls 'bedew protection' (that is, condensation prevention), as described in chapter 10 of the BINDER MK03 manual.  It is of boolean type.</p>

<h3 id="s5.3"><span class="ordinal">5.iii -</span> <span class="rampspec">j</span>: jump <a href="#toc">(back)</a></h3>
<p>The <em>jump</em> argument gives a label to jump to (possibly conditionally).  Its value is an int.</p>
<p>The execution model for a jump is simply to skip actions until reaching one with the correct label number, then continue as normal.  Thus, jumps can only go forwards, never backwards.  Moreover, labels need not be unique; and if you jump to a nonexistent label number, the profile will end.</p>

<h3 id="s5.4"><span class="ordinal">5.iv -</span> <span class="rampspec">l</span>: limit <a href="#toc">(back)</a></h3>
<p>The <em>limit</em> argument controls the tolerance when determining whether a temperature has been reached.  That is, the oven is considered to have reached the setpoint if its current temperature is within <em>limit</em> Kelvins of the setpoint.  Its value is a float.</p>

<h3 id="s5.5"><span class="ordinal">5.v -</span> <span class="rampspec">r</span>: rate <a href="#toc">(back)</a></h3>
<p>The <em>rate</em> argument sets the rate, in Kelvins per hour, at which the temperature setpoint is ramped.  Its value is a float.</p>
<p>The rate is unsigned; ie. it should be positive even when the temperature change is negative.</p>

<h3 id="s5.6"><span class="ordinal">5.vi -</span> <span class="rampspec">s</span>: setpoint <a href="#toc">(back)</a></h3>
<p>The <em>setpoint</em> argument sets the oven temperature setpoint, in Â°C.  Its value is a float.</p>
<p><em>setpoint</em> cannot be combined with <a href="#s5.1">change</a>.</p>

<h3 id="s5.7"><span class="ordinal">5.vii -</span> <span class="rampspec">t</span>: time <a href="#toc">(back)</a></h3>
<p>The <em>time</em> argument sets the duration of an action (or, in the case of <a href="#s4.5">Wait</a>, the timeout), in hours.  Its value is a float.</p>

<h3 id="s5.8"><span class="ordinal">5.viii -</span> <span class="rampspec">z</span>: stabilise <a href="#toc">(back)</a></h3>
<p>The <em>stabilise</em> argument sets the number of consecutive 'near enough' readings required for <a href="#s4.5">Wait</a> to finish (similar to OvenCtl's -S option).  Its value is an int.</p>
<p>The choice of <span class="rampspec">z</span> is a little odd, but <a href="#s5.6"><span class="rampspec">s</span></a> was already taken and nothing else seemed obvious.</p>

<h2 id="s6"><span class="ordinal">6 -</span> Examples <a href="#toc">(back)</a></h2>
<dl>
  <dd class="rampspec">I;Rs55,r10;Ht24;Rs25,r10;I</dd>
    <dt>Ambient to 55Â°C at 10K/hr per hour, hold for 24 hours, 55Â°C to ambient at 10K/hr, return to Idle mode.</dt>
  <dd class="rampspec">Ws20,l1,z6;[5#Xj1;Rc10,r10;Wl1,z6;]Xj1;Jj0;1:Rc-5,r10;Wl1,z6;X;0:I</dd>
    <dt>From 20Â°C up in 10K / 1hr steps to 70Â°C, unless a callback fails in which case back off by 5K and run another callback.  Return to Idle mode when done.</dt>
</dl>
</body>
</html>
