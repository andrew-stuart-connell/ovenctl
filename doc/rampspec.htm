<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf8;" />
<title>Rampspec profile format</title>
<style>
q {font-style:italic;}
.ordinal, .output, .rampspec {font-family:monospace;}
.rampspec {font-weight:400;}
a[href="#toc"] {font-size:75%;}
table.bare * {border:0;}
</style>
</head>
<body>

<h1>Rampspec - temperature profile format</h1>
<h2 id="toc">Table of Contents</h2>
<ol type="1">
  <li><a href="#s1">Shortcut: ramptool</a></li>
  <li><a href="#s2">Syntax overview</a></li>
  <li><a href="#s3">Pre-processor</a>
    <ol type="i">
      <li><a href="#s3.1"><span class="rampspec">#</span>: Repeat</a></li>
    </ol>
  </li>
  <li><a href="#s4">Actions</a>
    <ol type="i">
      <li><a href="#s4.1"><span class="rampspec">H</span>: Hold</a></li>
      <li><a href="#s4.2"><span class="rampspec">I</span>: Idle</a></li>
      <li><a href="#s4.3"><span class="rampspec">J</span>: Jump</a></li>
      <li><a href="#s4.4"><span class="rampspec">R</span>: Ramp</a></li>
      <li><a href="#s4.5"><span class="rampspec">W</span>: Wait</a></li>
      <li><a href="#s4.6"><span class="rampspec">X</span>: eXec</a></li>
    </ol>
  </li>
  <li><a href="#s5">Arguments</a>
    <ol type="i">
      <li><a href="#s5.1"><span class="rampspec">c</span>: change</a></li>
      <li><a href="#s5.2"><span class="rampspec">d</span>: dry</a></li>
      <li><a href="#s5.3"><span class="rampspec">j</span>: jump</a></li>
      <li><a href="#s5.4"><span class="rampspec">l</span>: limit</a></li>
      <li><a href="#s5.5"><span class="rampspec">r</span>: rate</a></li>
      <li><a href="#s5.6"><span class="rampspec">s</span>: setpoint</a></li>
      <li><a href="#s5.7"><span class="rampspec">t</span>: time</a></li>
      <li><a href="#s5.8"><span class="rampspec">z</span>: stabilise</a></li>
    </ol>
  </li>
  <li><a href="#s6">Examples</a></li>
  <li><a href="#s7">Notes</a></li>
</ol>
<hr />

<h2 id="s1"><span class="ordinal">1 -</span> Shortcut: <tt>ramptool</tt> <a href="#toc">(back)</a></h2>
<p>For really simple profiles (like, "go down to 10Â°C, hold for an hour, go back up"), you can use ramptool to generate the profile with execs ('X's) at periodic intervals.  For help run <tt>./ramptool.py -h</tt>.</p>
<p>You can then use `backticks` to insert the ramptool command into the rampspec commandline.</p>
<p>Note that the profile will last longer than expected due to the execs (ramping does not run concurrently with execs), unless you pass ramptool <tt>-x/--xdur</tt> (length of exec in minutes) so that it can allow for this.  To measure xdur for an exec, run a profile of <span class="rampspec">'X;I'</span> with that exec, and measure the time from <span class="output">"Started action: X"</span> to <span class="output">"Started action: I"</span>.</p>

<h2 id="s2"><span class="ordinal">2 -</span> Syntax overview <a href="#toc">(back)</a></h2>
<p>A rampspec (after <a href="#s3">pre-processing</a>) consists of a list of <a href="#s4">actions</a>, each of which has a list of <a href="#s5">arguments</a> and optionally a label (an integer, used as the target for a jump).</p>
<p>Here is the syntax, in <acronym title="extended Backus-Naur form">EBNF</a>:</p>
<table class="bare">
<tr><td>&lt;rampspec&gt;</td><td>::=</td><td>&lt;action&gt; | &lt;rampspec&gt; ';' &lt;action&gt;</td></tr>
<tr><td>&lt;action&gt;</td><td>::=</td><td>&lt;label&gt;? &lt;act&gt; &lt;arglist&gt;?</td></tr>
<tr><td>&lt;label&gt;</td><td>::=</td><td>&lt;int&gt; ':'</td></tr>
<tr><td>&lt;int&gt;</td><td>::=</td><td>&lt;digit&gt; &lt;int&gt;?</td></tr>
<tr><td>&lt;act&gt;</td><td>::=</td><td>&lt;upper&gt;</td></tr>
<tr><td>&lt;arglist&gt;</td><td>::=</td><td>&lt;argument&gt; | &lt;arglist&gt; ',' &lt;argument&gt;</td></tr>
<tr><td>&lt;argument&gt;</td><td>::=</td><td>&lt;lower&gt; &lt;value&gt;</td></tr>
<tr><td>&lt;value&gt;</td><td>::=</td><td>&lt;no-comma&gt; | &lt;value&gt; &lt;no-comma&gt;</td></tr>
<tr><td>&lt;no-comma&gt;</td><td>::=</td><td>any character except ','</td></tr>
</table>
<p>While the value of an argument is defined as a &lt;no-comma&gt;, in practice all arguments currently take an int, a float, or (in the case of booleans) no explicit value.</p>

<!--
== Syntax of rampspec strings ==
=== Pre-processor ===
A pre-processing macro looks like {{{'[' <arglist>? <macroname> <text> ']'}}} where <text> contains no '[' or ']', <arglist> is a comma-separated list of arguments (each containing no '[', ']' or ',', nor any <macroname>s), and <macroname> is from the following:
||Macro ||Arguments ||Description ||
||# ||int n ||Repeats <text> n times ||




These macros can be nested, and are evaluated from the middle outwards, so {{{[[2#1]#I;]}}} becomes {{{[11#I;]}}} becomes {{{I;I;I;I;I;I;I;I;I;I;I;}}} (though you ''really'' don't want to make numbers out of repeats like this, it'd be excessive cleverness; it just illustrates how the expansion works).

The pre-processor is blind to the syntax of the actual language; it doesn't tokenise at all.




The stereotyped elements, or ''actions'', are:
||Action ||Mnemonic name ||Arguments ||Description ||
||H ||Hold ||d,s,t ||Maintain a steady setpoint for a specified time ||
||I ||Idle ||t ||Leave the oven in Idle Mode for a specified time ||
||J ||Jump ||j ||Jumps forwards to the next action with label j ||
||R ||Ramp ||d,r,s,t ||Linearly ramp the setpoint to a new value at a specified rate (or over a specified time) ||
||W ||Wait ||d,l,s,t,z ||Set a new setpoint and wait for it to be reached ||
||X ||Execute ||j,t ||Execute a test iteration with the specified timeout, jumping to j if test fails or times out ||




The arguments are:
||Argument ||Mnemonic name ||Value type ||Description ||
||c ||change ||float ||Change in temperature setpoint, in Kelvin ||
||d ||dry ||boolean ||Activate 'bedew protection' (condensation prevention) ||
||j ||jump ||int ||Label number to jump to (possibly conditionally) ||
||l ||limit ||float ||Maximum error considered 'near enough' for '''W'''ait ||
||r ||rate ||float ||Ramping rate, in K/hr (degrees per hour) ||
||s ||setpoint ||float ||Temperature setpoint, in degrees C ||
||t ||time ||float ||Duration (or, for '''W'''ait, timeout) ||
||z ||stabilise ||int ||Similar to OvenCtl's -S option; number of consecutive 'near enough' readings required for '''W'''ait to finish ||




==== Notes ====
 * After an '''I'''dle, the 'previous setpoint' for '''H'''olding and '''R'''amping is set to the measured ''actual temperature'' of the oven at the end of the idle period.  For reasonably long idling, this will approximate ambient temperature.
  * For this reason, most rampspecs will start with {{{I;}}}
  * Most will also end with {{{I}}} in order to leave the oven idle when finished.
 * '''W'''ait without '''l'''imit will wait for the temperature to cross the setpoint, assuming the temperature to be continuous and thus subject to the initial value theorem.
 * '''W'''ait with '''z''' (stabilise) but no '''l'''imit is forbidden (and the parser rejects it).
  * Yes, it's weird that stabilise is '''z''', but '''s''' was already taken and nothing else seemed obvious
 * To get the equivalent of OvenCtl 'acclimatise' on '''W'''ait, use '''z''' (stabilise) in 3-second units (so, {{{z100}}} for the standard 5 minutes).
  * Alternatively (or after a '''R'''amp), you can use '''H'''old with an appropriate '''t'''ime.
 * For '''R'''amp you must use at least one of '''r'''ate and '''t'''ime.  Using both has the semantics of "whichever is slower".
 * '''R'''amp '''r'''ates are now ''non-directional''; they indicate the magnitude of the ramp rate.  rampspec will ramp in whichever direction it needs to to reach the new setpoint.
 * A boolean argument, such as '''d'''ry, has 'store_true' semantics; its <value> part is just an empty string.
 * If you '''j'''ump to a nonexistent label, the profile will end.
 * Labels need not be unique.
  * The execution model for a jump is simply to skip actions until reaching one with the correct label number, then continue as normal.  Thus, jumps can only go forwards, never backwards.
 * '''c'''hange and '''s'''etpoint cannot be combined.
  * Rcrt is allowed even though it's pointless (since either the r or the t will have no effect).
 * The test run by e'''X'''ecute is supplied as a callback parameter to RampSpec.prepare(); it should have the signature (data -> bool, data) where data is a further parameter which can be supplied to RampSpec.prepare().  The returned bool should be False for success and True for failure (typically you'll use an integer error code, 0 for success).

=== Examples ===
"ambient to 55 at 10C per hour, hold for 24 hours, 55C to ambient at 10C per hour" becomes {{{I;Rs55,r10;Ht24;Rs25,r10;I}}}


-->
</body>
</html>
